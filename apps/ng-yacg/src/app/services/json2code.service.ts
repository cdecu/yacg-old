import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, debounceTime, filter, map, switchMap } from 'rxjs/operators';
import { ModelInfo, modelPrintor, modelInfo } from '@yacg/core';
import { TSPrintor, PascalPrintor } from '@yacg/core';

@Injectable({
  providedIn: 'root',
})
export class json2codeService {
  private _IntfName = 'intf';
  private _IntfDescr = 'Generated by yacg';
  private _PrintorName = 'typescript';
  private ami!: modelInfo;
  private printor!: modelPrintor;

  public $json: BehaviorSubject<string> = new BehaviorSubject('');
  public $code = this.$json.pipe(
    debounceTime(250),
    filter((x) => !!x),
    switchMap((x) =>
      of(x).pipe(
        map((x) => {
          this.checkModel();
          this.ami.loadFromJSON(this._IntfName, this._IntfDescr, JSON.parse(x));
          this.checkPrintor();
          return this.printor.printModel(this.ami);
        }),
        catchError((error) => of(error?.message ?? error)),
      ),
    ),
  );

  get IntfName(): string {
    return this._IntfName;
  }
  set IntfName(value: string) {
    if (this._IntfName !== value) {
      this._IntfName = value;
      // force reprocess
      const last = this.$json.getValue();
      this.$json.next(last);
    }
  }
  get IntfDescr(): string {
    return this._IntfDescr;
  }
  set IntfDescr(value: string) {
    if (this._IntfDescr !== value) {
      this._IntfDescr = value;
      // force reprocess
      const last = this.$json.getValue();
      this.$json.next(last);
    }
  }
  public get selectedPrintor(): string {
    return this._PrintorName;
  }
  public set selectedPrintor(value: string) {
    if (value !== this._PrintorName) {
      this._PrintorName = value;
      this.createPrintor();
      // force reprocess
      const last = this.$json.getValue();
      this.$json.next(last);
    }
  }
  set data(data: string) {
    this.$json.next(data);
  }

  private checkModel() {
    if (!this.ami) {
      this.ami = new ModelInfo();
    }
  }
  private checkPrintor() {
    if (!this.printor) {
      this.createPrintor();
    }
  }
  private createPrintor() {
    switch (this._PrintorName) {
      case 'pascal':
        this.printor = new PascalPrintor({});
        break;
      default:
        this.printor = new TSPrintor({});
        break;
    }
  }
}
